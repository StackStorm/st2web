# Setup in CircleCI account the following ENV variables:
# IS_PRODUCTION (default: 0)
# IS_ENTERPRISE
# PACKAGECLOUD_ORGANIZATION (default: stackstorm)
# PACKAGECLOUD_TOKEN

version: 2
jobs:
  build:
    machine: true
    environment:
      DEPLOY_PACKAGES: 1
      DEB: bionic focal
      RPM: el7 el8
      ST2_VERSION: "3.6dev"
      ST2_HOST: localhost
      ST2_PROTOCOL: http
      ST2_USERNAME: st2admin
      ST2_PASSWORD: Ch@ngeMe
      ST2_TEST_ENVIRONMENT: https://github.com/StackStorm/st2-docker
    steps:
      - checkout
      - run:
          name: Download helper scripts (for packagecloud)
          command: |
            mkdir ~/scripts
            wget -qO - https://github.com/StackStorm/st2-packages/raw/master/.circle/packagecloud.sh > ~/scripts/packagecloud.sh
            chmod 755 ~/scripts/packagecloud.sh
            echo "export PATH=${HOME}/scripts:${PATH}" >> $BASH_ENV
      - run:
          name: Switch to supported version of Node
          command: |
            set +e
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install 14.16.1
            nvm alias default 14.16.1

            # Each step uses the same `$BASH_ENV`, so need to modify it
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      - run:
          name: Export package version
          command: |
            PKG_VERSION=$(node -e "console.log(require('./package.json').st2_version);")
            if [ -n "$PACKAGECLOUD_TOKEN" ]; then
              PKG_RELEASE=$(packagecloud.sh next-revision bionic ${PKG_VERSION} st2web)
            else
              # is fork
              PKG_RELEASE=1
            fi
            echo "export PKG_VERSION=${PKG_VERSION}" >> $BASH_ENV
            echo "export PKG_RELEASE=${PKG_RELEASE}" >> $BASH_ENV
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install rpm jq devscripts debhelper
            gem install package_cloud
            npm install --global lerna yarn
      - run:
          name: Install package dependencies
          command: lerna bootstrap

      - run:
          name: Run unit tests
          command: npm run test-unit

      - run:
          name: Update Docker Compose
          command: |
            set -x
            sudo sh -c "curl -L https://github.com/docker/compose/releases/download/1.28.6/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose"
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Clone test containers
          command: |
            echo "Cloning ${ST2_DOCKER_BRANCH:-master} branch of st2-docker"
            git clone --branch ${ST2_DOCKER_BRANCH:-master} --depth 1 ${ST2_TEST_ENVIRONMENT} ~/st2-docker
      - run:
          name: Configufe docker compose config
          command: |
            # Configure allow origin in the user config
            echo "[api]" > ~/st2-docker/files/st2.user.conf
            echo "allow_origin = *" >> ~/st2-docker/files/st2.user.conf
      - run:
          name: Start test containers
          command: |
            docker-compose -f ~/st2-docker/docker-compose.yml up -d
            sleep 100
      - run:
          name: Check test containers
          command: |
            docker-compose -f ~/st2-docker/docker-compose.yml exec st2client st2 run core.noop
      - run:
          name: Run functional tests
          command: npm run test-functional
      - run:
          name: Reset test containers
          command: |
            docker-compose -f ~/st2-docker/docker-compose.yml down --rmi
            docker-compose -f ~/st2-docker/docker-compose.yml up -d
            sleep 100
      - run:
          name: Recheck test containers
          command: |
            docker-compose -f ~/st2-docker/docker-compose.yml exec st2client st2 run core.noop
            docker-compose -f ~/st2-docker/docker-compose.yml exec st2client st2 execution list
      - run:
          name: Run tests on production version
          command: npm run test-production

      - run:
          name: Create directories for Artifacts
          command: mkdir ~/artifacts && cd ~/artifacts && mkdir ${DEB} ${RPM} logs
      - run:
          name: Fetch container logs
          command: |
            for container in $(docker ps -a --format "{{.Names}}"); do
              docker logs ${container} > ~/artifacts/logs/${container}.log 2>&1
            done
      - run:
          name: Make deb packages
          command: |
            make deb
            echo $DEB | tr ' ' '\n' | xargs -I{} cp -vr ../st2web_*.{deb,changes} ~/artifacts/{}
      - run:
          name: Make RPM packages
          command: |
            make rpm
            echo $RPM | tr ' ' '\n' | xargs -I{} cp -vr ../st2web-*.rpm ~/artifacts/{}
      - store_artifacts:
          path: ~/artifacts
          destination: packages
      - persist_to_workspace:
          root: /home/circleci/artifacts
          paths:
            - bionic
            - focal
            - el7
            - el8
  deploy:
    docker:
      - image: ruby:2.6.3
    environment:
      ARTIFACTS: /home/circleci/artifacts
      DISTROS: bionic focal el7 el8
    steps:
      - checkout
      - attach_workspace:
          at: /home/circleci/artifacts
      - run:
          name: List workspace files
          command: find $ARTIFACTS | sed 's|[^/]*/|  |g'
      - run:
          name: Install dependencies
          command: |
            set -x
            apt-get -qq update
            apt-get -y install jq
            wget -qO - https://github.com/StackStorm/st2-packages/raw/master/.circle/packagecloud.sh > ~/packagecloud.sh
            chmod 755 ~/packagecloud.sh
            gem install package_cloud
      - run:
          name: Deploy to packagecloud
          command: |
            for distro in ${DISTROS}; do
              ~/packagecloud.sh deploy $distro $ARTIFACTS/$distro
            done
workflows:
  version: 2
  build_test_deploy_on_push:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - /v[0-9]+\.[0-9]+/
                - feature/circleci
  build_test_nightly:
    jobs:
        - build
    triggers:
      - schedule:
          # NOTE: We run it at 1 am UTC every day
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master
